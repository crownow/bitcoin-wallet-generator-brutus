import json
import socket
import os
import time
import random
import hashlib
import base58
import segwit_addr
import threading
import logging
from queue import Queue

# üìÇ –ü–∞–ø–∫–∏
INPUT_FOLDER = "sha256_from_pass/address"
OUTPUT_FILE = "sha256_from_pass/found_keys_with_balance.txt"

# ‚ö° Fulcrum —Å–µ—Ä–≤–µ—Ä
FULCRUM_HOST = "146.0.73.143"  # IP —Ç–≤–æ–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
FULCRUM_PORT = 50001
BATCH_SIZE = 5000  # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
THREADS = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
PAUSE_TIME = 0.05  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ (50 –º—Å)

# üìÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_FILE = "sha256_from_pass/fulcrum_checker.log"
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)

logging.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞: THREADS=%d, BATCH_SIZE=%d, PAUSE_TIME=%.2f —Å–µ–∫", THREADS, BATCH_SIZE, PAUSE_TIME)

# üîë –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞ –≤ Scripthash
def address_to_scripthash(address):
    try:
        if address.startswith("1"):  # P2PKH (Legacy)
            decoded = base58.b58decode_check(address)
            script = b'\x76\xa9\x14' + decoded[1:] + b'\x88\xac'
        elif address.startswith("3"):  # P2SH
            decoded = base58.b58decode_check(address)
            script = b'\xa9\x14' + decoded[1:] + b'\x87'
        elif address.startswith("bc1q"):  # P2WPKH (Bech32)
            hrp, data = segwit_addr.decode_segwit_address("bc", address)
            script = bytes([0x00, len(data)]) + bytes(data)
        elif address.startswith("bc1p"):  # P2TR (Taproot, Bech32m)
            hrp, data = segwit_addr.decode_segwit_address("bc", address)
            script = bytes([0x01, len(data)]) + bytes(data)
        else:
            logging.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ %s", address)
            return None

        scripthash = hashlib.sha256(script).digest()[::-1].hex()  # SHA256 + little-endian
        return scripthash
    except Exception as e:
        logging.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞ %s: %s", address, str(e))
        return None

# üîç –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –±–∞–ª–∞–Ω—Å–∞ —É Fulcrum
def get_balances(scripthashes, address_map):
    if not scripthashes:
        return {}

    requests = [{"jsonrpc": "2.0", "id": i, "method": "blockchain.scripthash.get_balance", "params": [sh]} for i, sh in enumerate(scripthashes)]
    request_json = json.dumps(requests) + "\n"

    try:
        start_time = time.time()
        with socket.create_connection((FULCRUM_HOST, FULCRUM_PORT), timeout=10) as sock:
            sock.sendall(request_json.encode())
            response_data = b""
            while True:
                chunk = sock.recv(1024000)
                if not chunk:
                    break
                response_data += chunk

        results = json.loads(response_data.decode())
        balances = {}
        for res in results:
            if "result" in res:
                scripthash = scripthashes[res["id"]]
                address = address_map[scripthash]
                confirmed = res["result"].get("confirmed", 0)
                unconfirmed = res["result"].get("unconfirmed", 0)
                total_balance = confirmed + unconfirmed
                if total_balance > 0:
                    balances[address] = total_balance

        end_time = time.time()
        logging.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: %d –∞–¥—Ä–µ—Å–æ–≤, –≤—Ä–µ–º—è: %.3f —Å–µ–∫", len(scripthashes), end_time - start_time)
        return balances

    except socket.timeout:
        logging.error("‚è≥ Timeout –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Fulcrum!")
    except ConnectionRefusedError:
        logging.error("üö´ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Fulcrum –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!")
    except Exception as e:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %s", str(e))

    return {}

# üéØ –§—É–Ω–∫—Ü–∏—è –ø–æ—Ç–æ–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
def worker(task_queue):
    while True:
        try:
            item = task_queue.get()
            if item is None:
                break

            hex_key, addresses = item
            address_map = {}
            scripthashes = []

            for addr in addresses:
                scripthash = address_to_scripthash(addr)
                if scripthash:
                    scripthashes.append(scripthash)
                    address_map[scripthash] = addr

            for i in range(0, len(scripthashes), BATCH_SIZE):
                batch = scripthashes[i:i + BATCH_SIZE]
                balances = get_balances(batch, address_map)

                if balances:
                    with open(OUTPUT_FILE, "a") as outfile:
                        for address, balance in balances.items():
                            outfile.write(f"{hex_key} - {address} - {balance} satoshis\n")

                delay = random.uniform(PAUSE_TIME, PAUSE_TIME * 2)
                logging.info("‚è≥ –ü–∞—É–∑–∞ %.3f —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º...", delay)
                time.sleep(delay)

        except Exception as e:
            logging.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ: %s", str(e))
        finally:
            task_queue.task_done()

# üìÇ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ (–ø–æ –æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É –∑–∞ —Ä–∞–∑)
def check_balances():
    files = [os.path.join(INPUT_FOLDER, f) for f in os.listdir(INPUT_FOLDER) if os.path.isfile(os.path.join(INPUT_FOLDER, f))]

    logging.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è %d —Ñ–∞–π–ª–æ–≤...", len(files))

    for file in files:
        logging.info("üìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: %s", file)

        task_queue = Queue()
        with open(file, "r", encoding="utf-8", errors="ignore") as infile:
            for line in infile:
                parts = line.strip().split(" - ")
                hex_key = parts[0]
                addresses = parts[1:]
                task_queue.put((hex_key, addresses))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏
        threads = []
        for _ in range(THREADS):
            thread = threading.Thread(target=worker, args=(task_queue,))
            thread.start()
            threads.append(thread)

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        task_queue.join()

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫–∏
        for _ in range(THREADS):
            task_queue.put(None)
        for thread in threads:
            thread.join()

        logging.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: %s", file)

    logging.info("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –ê–¥—Ä–µ—Å–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º –∑–∞–ø–∏—Å–∞–Ω—ã –≤ %s", OUTPUT_FILE)

if __name__ == "__main__":
    check_balances()
