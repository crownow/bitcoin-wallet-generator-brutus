import os
import hashlib
import base58
import ecdsa
import sys
import segwit_addr  # Bech32 –∏ Bech32m –∫–æ–¥–∏—Ä–æ–≤—â–∏–∫
from multiprocessing import Pool, cpu_count

# üìÇ –ü–∞–ø–∫–∏
INPUT_FOLDER = "sha256_from_pass/hex"
OUTPUT_FOLDER = "sha256_from_pass/address"

# ‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–æ—Å—Ç–∏
NUM_PROCESSES = max(2, cpu_count() - 1)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —è–¥—Ä–∞, –∫—Ä–æ–º–µ 1

# üîë –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ WIF-–∫–ª—é—á–∞ –∏–∑ HEX
def generate_wif(private_key_hex, compressed=True):
    extended_key = "80" + private_key_hex
    if compressed:
        extended_key += "01"
    first_sha256 = hashlib.sha256(bytes.fromhex(extended_key)).digest()
    second_sha256 = hashlib.sha256(first_sha256).digest()
    checksum = second_sha256[:4]
    final_key = extended_key + checksum.hex()
    return base58.b58encode(bytes.fromhex(final_key)).decode()

# üîë –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π (–æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞)
def generate_public_keys(private_key_hex):
    private_key_bytes = bytes.fromhex(private_key_hex)
    sk = ecdsa.SigningKey.from_string(private_key_bytes, curve=ecdsa.SECP256k1)
    vk = sk.verifying_key

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Uncompressed Public Key (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 04, 65 –±–∞–π—Ç)
    pubkey_uncompressed = (b'\x04' + vk.to_string()).hex()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Compressed Public Key (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 02/03, 33 –±–∞–π—Ç–∞)
    prefix = b'\x02' if vk.pubkey.point.y() % 2 == 0 else b'\x03'
    pubkey_compressed = (prefix + vk.to_string()[:32]).hex()

    return pubkey_compressed, pubkey_uncompressed

# üîë –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Bech32-–∞–¥—Ä–µ—Å–æ–≤
def bech32_encode(hrp, witver, witprog):
    return segwit_addr.encode_segwit_address(hrp, witver, bytes(witprog))

# üîë –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Bitcoin-–∞–¥—Ä–µ—Å–æ–≤
def generate_bitcoin_addresses(private_key_hex, public_key_compressed, public_key_uncompressed):
    pubkey_bytes_compressed = bytes.fromhex(public_key_compressed)
    pubkey_bytes_uncompressed = bytes.fromhex(public_key_uncompressed)

    # üîµ P2PKH (Legacy, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "1")
    ripemd160_uncompressed = hashlib.new('ripemd160', hashlib.sha256(pubkey_bytes_uncompressed).digest()).digest()
    p2pkh_address_uncompressed = base58.b58encode_check(b'\x00' + ripemd160_uncompressed).decode()

    addresses = {"P2PKH (Uncompressed)": p2pkh_address_uncompressed}

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Å–∂–∞—Ç–æ–≥–æ –∫–ª—é—á–∞
    ripemd160_compressed = hashlib.new('ripemd160', hashlib.sha256(pubkey_bytes_compressed).digest()).digest()
    
    # üü¢ P2SH-P2WPKH (SegWit Nested, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "3")
    p2sh_address = base58.b58encode_check(b'\x05' + ripemd160_compressed).decode()
    addresses["P2SH-P2WPKH (Compressed)"] = p2sh_address

    # üîµ P2WPKH (Native SegWit, Bech32, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "bc1q")
    p2wpkh_address = bech32_encode("bc", 0, ripemd160_compressed)  # Witness Version 0
    addresses["P2WPKH (Compressed)"] = p2wpkh_address

    # üî¥ P2TR (Taproot, Bech32m, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "bc1p")
    taproot_sk = ecdsa.SigningKey.from_string(bytes.fromhex(private_key_hex), curve=ecdsa.SECP256k1)
    taproot_pk = taproot_sk.verifying_key.pubkey.point.x().to_bytes(32, "big")  # X-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
    p2tr_address = bech32_encode("bc", 1, taproot_pk)  # Witness Version 1 (Bech32m)
    addresses["P2TR (Compressed)"] = p2tr_address

    return addresses

# üî• –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (HEX –∫–ª—é—á -> –∞–¥—Ä–µ—Å–∞)
def process_hex_key(hex_key):
    if len(hex_key) != 64:
        return None  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π (–æ–±–∞ —Å—Ä–∞–∑—É)
    pubkey_compressed, pubkey_uncompressed = generate_public_keys(hex_key)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤
    addresses = generate_bitcoin_addresses(hex_key, pubkey_compressed, pubkey_uncompressed)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏
    output_line = f"{hex_key} - {addresses['P2PKH (Uncompressed)']} - " \
                  f"{addresses['P2SH-P2WPKH (Compressed)']} - " \
                  f"{addresses['P2WPKH (Compressed)']} - " \
                  f"{addresses['P2TR (Compressed)']}\n"
    return output_line

# üìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–º–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–æ)
def process_file(file_path):
    print(f"üìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {file_path}")

    with open(file_path, "r", encoding="utf-8", errors="ignore") as infile:
        lines = [line.strip() for line in infile]

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º multiprocessing —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫
    with Pool(NUM_PROCESSES) as pool:
        results = pool.map(process_hex_key, lines)

    # –§–∏–ª—å—Ç—Ä—É–µ–º None (–µ—Å–ª–∏ –±—ã–ª–∏ –æ—à–∏–±–∫–∏)
    results = [r for r in results if r]

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π
    output_path = os.path.join(OUTPUT_FOLDER, os.path.basename(file_path))
    with open(output_path, "w") as outfile:
        outfile.writelines(results)

    print(f"‚úÖ –§–∞–π–ª {file_path} –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –°–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_path}")

# üî• –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–±–µ–∑ multiprocessing –¥–ª—è —Ñ–∞–π–ª–æ–≤)
def generate_addresses():
    os.makedirs(OUTPUT_FOLDER, exist_ok=True)

    files = [os.path.join(INPUT_FOLDER, f) for f in os.listdir(INPUT_FOLDER) if os.path.isfile(os.path.join(INPUT_FOLDER, f))]

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –∞ –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ ‚Äî –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    for file in files:
        process_file(file)

    print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {OUTPUT_FOLDER}")

if __name__ == "__main__":
    generate_addresses()
