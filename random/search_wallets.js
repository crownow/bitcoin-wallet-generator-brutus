const sqlite3 = require("sqlite3").verbose();
const bitcoin = require("bitcoinjs-lib");
const ecc = require("tiny-secp256k1"); // –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ ECC
const wif = require("wif");
const crypto = require("crypto");
const fs = require("fs");

const ECPairFactory = require("ecpair").default;
const ECPair = ECPairFactory(ecc); // –°–æ–∑–¥–∞—ë–º ECPair

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ECC
try {
  if (!ecc || !ecc.isPoint) {
    throw new Error("tiny-secp256k1 is not working properly");
  }
  bitcoin.initEccLib(ecc);
  console.log("‚úÖ ECC library initialized successfully!");
} catch (error) {
  console.error("‚ùå ECC library failed to initialize:", error);
  process.exit(1);
}

// –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É
const db = new sqlite3.Database("wallets.db");

// –§–∞–π–ª –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
const foundKeysFile = "founded_hex.txt";

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ (SHA-256 HEX)
function generatePrivateKey() {
  return crypto.randomBytes(32).toString("hex");
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è WIF-—Ñ–æ—Ä–º–∞—Ç–∞ –∫–ª—é—á–∞
function generateWIF(privateKeyHex) {
  return wif.encode(128, Buffer.from(privateKeyHex, "hex"), true);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ (—Å–∂–∞—Ç—ã–π –∏ –Ω–µ—Å–∂–∞—Ç—ã–π —Ñ–æ—Ä–º–∞—Ç)
function generatePublicKey(privateKeyHex) {
  const keyPair = ECPair.fromPrivateKey(Buffer.from(privateKeyHex, "hex"));

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Uint8Array –≤ Buffer
  const compressed = Buffer.from(keyPair.publicKey);
  const uncompressed = Buffer.concat([
    Buffer.from([0x04]),
    keyPair.publicKey.slice(1, 33),
    keyPair.publicKey.slice(33, 65),
  ]);

  return { compressed, uncompressed };
}

// –°–æ–∑–¥–∞–Ω–∏–µ –±–∏—Ç–∫–æ–∏–Ω-–∞–¥—Ä–µ—Å–æ–≤ 4 —Ç–∏–ø–æ–≤
function generateBitcoinAddresses(publicKey) {
  return {
    p2pkh: bitcoin.payments.p2pkh({ pubkey: Buffer.from(publicKey.compressed) })
      .address,
    p2sh: bitcoin.payments.p2sh({
      redeem: bitcoin.payments.p2wpkh({
        pubkey: Buffer.from(publicKey.compressed),
      }),
    }).address,
    p2wpkh: bitcoin.payments.p2wpkh({
      pubkey: Buffer.from(publicKey.compressed),
    }).address,
    p2tr: bitcoin.payments.p2tr({
      internalPubkey: Buffer.from(publicKey.compressed.slice(1, 33)),
    }).address,
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –≤ –±–∞–∑–µ
function checkWallets(addresses, privateKey) {
  db.all(
    `SELECT address FROM wallets WHERE address IN (?, ?, ?, ?)`,
    Object.values(addresses),
    (err, rows) => {
      if (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ:", err);
        return;
      }

      if (rows.length > 0) {
        console.log(`üéØ –ù–∞–π–¥–µ–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á! ${privateKey}`);
        fs.appendFileSync(foundKeysFile, `${privateKey}\n`);
      }
    }
  );
}

// –û—Å–Ω–æ–≤–Ω–æ–π –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø–æ–∏—Å–∫–∞
function startSearching() {
  console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫...");

  setInterval(() => {
    const privateKeyHex = generatePrivateKey();
    const publicKey = generatePublicKey(privateKeyHex);
    const addresses = generateBitcoinAddresses(publicKey);
    checkWallets(addresses, privateKeyHex);
  }, 1); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ –∫–∞–∂–¥—É—é –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—É
}

// –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞
startSearching();
