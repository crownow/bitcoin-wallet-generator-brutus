const sqlite3 = require("sqlite3").verbose();
const { Worker, isMainThread, parentPort } = require("worker_threads");
const os = require("os");
const fs = require("fs");

// –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É
const db = new sqlite3.Database("wallets.db");

// –§–∞–π–ª –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
const foundKeysFile = "founded_hex.txt";

// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤ (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —è–¥–µ—Ä CPU)
const numWorkers = os.cpus().length;

if (isMainThread) {
  console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º ${numWorkers} –≤–æ—Ä–∫–µ—Ä–æ–≤...`);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∏–∑ –±–∞–∑—ã –≤ Set –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
  db.all("SELECT address FROM wallets", [], (err, rows) => {
    if (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤:", err);
      process.exit(1);
    }

    const walletsSet = new Set(rows.map((row) => row.address));
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${walletsSet.size} –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ –ø–∞–º—è—Ç—å.`);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä–æ–≤
    for (let i = 0; i < numWorkers; i++) {
      const worker = new Worker(__dirname + "/worker.js", {
        workerData: Array.from(walletsSet), // –ü–µ—Ä–µ–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –≤–æ—Ä–∫–µ—Ä—É
      });

      console.log(`üîπ –í–æ—Ä–∫–µ—Ä ${worker.threadId} –∑–∞–ø—É—â–µ–Ω.`);

      worker.on("message", (privateKey) => {
        console.log(
          `üéØ –ù–ê–ô–î–ï–ù –ö–õ–Æ–ß (–í–æ—Ä–∫–µ—Ä ${worker.threadId}): ${privateKey}`
        );
        fs.appendFileSync(foundKeysFile, `${privateKey}\n`);
      });

      worker.on("error", (err) => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –≤–æ—Ä–∫–µ—Ä–µ ${worker.threadId}:`, err);
      });

      worker.on("exit", (code) => {
        if (code !== 0) {
          console.error(
            `‚ùå –í–æ—Ä–∫–µ—Ä ${worker.threadId} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`
          );
        } else {
          console.log(`‚úÖ –í–æ—Ä–∫–µ—Ä ${worker.threadId} –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.`);
        }
      });
    }
  });
} else {
  console.log(`‚ùå –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∫–∞–∫ –≥–ª–∞–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å.`);
}
