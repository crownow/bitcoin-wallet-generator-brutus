const sqlite3 = require("sqlite3").verbose();
const bitcoin = require("bitcoinjs-lib");
const crypto = require("crypto");
const fs = require("fs");

// –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É
const db = new sqlite3.Database("wallets.db");

// –§–∞–π–ª –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
const foundKeysFile = "founded_hex.txt";

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ (SHA-256 HEX)
function generatePrivateKey() {
  return crypto.randomBytes(32).toString("hex");
}

// –°–æ–∑–¥–∞–Ω–∏–µ –±–∏—Ç–∫–æ–∏–Ω-–∞–¥—Ä–µ—Å–æ–≤ 4 —Ç–∏–ø–æ–≤
function generateBitcoinAddresses(privateKeyHex) {
  const keyPair = bitcoin.ECPair.fromPrivateKey(
    Buffer.from(privateKeyHex, "hex")
  );
  const { publicKey } = keyPair;
  const network = bitcoin.networks.bitcoin;

  return [
    bitcoin.payments.p2pkh({ pubkey: publicKey, network }).address, // P2PKH
    bitcoin.payments.p2sh({
      redeem: bitcoin.payments.p2wpkh({ pubkey: publicKey, network }),
      network,
    }).address, // P2SH
    bitcoin.payments.p2wpkh({ pubkey: publicKey, network }).address, // P2WPKH
    bitcoin.payments.p2tr({ internalPubkey: publicKey.slice(1, 33), network })
      .address, // P2TR
  ];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –≤ –±–∞–∑–µ
function checkWallets(addresses, privateKey) {
  db.all(
    `SELECT address FROM wallets WHERE address IN (?, ?, ?, ?)`,
    addresses,
    (err, rows) => {
      if (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ:", err);
        return;
      }

      if (rows.length > 0) {
        console.log(`üéØ –ù–∞–π–¥–µ–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á! ${privateKey}`);
        fs.appendFileSync(foundKeysFile, `${privateKey}\n`);
      }
    }
  );
}

// –û—Å–Ω–æ–≤–Ω–æ–π –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
function startSearching() {
  console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫...");

  setInterval(() => {
    const privateKey = generatePrivateKey();
    const addresses = generateBitcoinAddresses(privateKey);
    checkWallets(addresses, privateKey);
  }, 1); // –ö–∞–∂–¥—É—é –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—É –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
}

// –ó–∞–ø—É—Å–∫
startSearching();
