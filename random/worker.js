const bitcoin = require("bitcoinjs-lib");
const crypto = require("crypto");
const { parentPort, workerData } = require("worker_threads");
const ecc = require("tiny-secp256k1");
const ECPairFactory = require("ecpair").default;
const ECPair = ECPairFactory(ecc);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é ECC
try {
  bitcoin.initEccLib(ecc);
  console.log(`‚úÖ –í–æ—Ä–∫–µ—Ä ${process.pid} —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª ECC.`);
} catch (error) {
  console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ECC –≤ –≤–æ—Ä–∫–µ—Ä–µ ${process.pid}:`, error);
  process.exit(1);
}

// –ü–æ–ª—É—á–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
const walletsSet = new Set(workerData);
console.log(`üîπ –í–æ—Ä–∫–µ—Ä ${process.pid} –ø–æ–ª—É—á–∏–ª ${walletsSet.size} –∞–¥—Ä–µ—Å–æ–≤.`);

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ (SHA-256 HEX)
function generatePrivateKey() {
  return crypto.randomBytes(32).toString("hex");
}

// –°–æ–∑–¥–∞–Ω–∏–µ –±–∏—Ç–∫–æ–∏–Ω-–∞–¥—Ä–µ—Å–æ–≤ 4 —Ç–∏–ø–æ–≤
function generateBitcoinAddresses(privateKeyHex) {
  const keyPair = ECPair.fromPrivateKey(Buffer.from(privateKeyHex, "hex"));
  const { publicKey } = keyPair;
  const network = bitcoin.networks.bitcoin;

  return [
    bitcoin.payments.p2pkh({ pubkey: publicKey, network }).address, // P2PKH
    bitcoin.payments.p2sh({
      redeem: bitcoin.payments.p2wpkh({ pubkey: publicKey, network }),
      network,
    }).address, // P2SH
    bitcoin.payments.p2wpkh({ pubkey: publicKey, network }).address, // P2WPKH
    bitcoin.payments.p2tr({ internalPubkey: publicKey.slice(1, 33), network })
      .address, // P2TR
  ];
}

// –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 000 –∞–¥—Ä–µ—Å–æ–≤
let checkedAddresses = 0;
const startTime = Date.now();

// –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø–æ–∏—Å–∫–∞
while (true) {
  const privateKey = generatePrivateKey();
  const addresses = generateBitcoinAddresses(privateKey);

  for (const address of addresses) {
    if (walletsSet.has(address)) {
      console.log(`üéØ –í–æ—Ä–∫–µ—Ä ${process.pid} –Ω–∞—à—ë–ª –∫–ª—é—á: ${privateKey}`);
      parentPort.postMessage(privateKey);
    }
  }

  checkedAddresses += 4;

  if (checkedAddresses % 100000 === 0) {
    const elapsedTime = ((Date.now() - startTime) / 1000).toFixed(2);
    console.log(
      `üîç –í–æ—Ä–∫–µ—Ä ${process.pid} –ø—Ä–æ–≤–µ—Ä–∏–ª ${checkedAddresses} –∞–¥—Ä–µ—Å–æ–≤ –∑–∞ ${elapsedTime} —Å–µ–∫.`
    );
  }
}
