const sqlite3 = require("sqlite3").verbose();
const fs = require("fs");
const readline = require("readline");

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
const walletsFile = "/home/bitcoin_addresses_latest2.tsv";
const dbFile = "wallets.db";

// –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database(dbFile, (err) => {
  if (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ:", err);
    process.exit(1);
  }
  console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.");
});

// –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
db.serialize(() => {
  console.log("üìå –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É wallets...");
  db.run("DROP TABLE IF EXISTS wallets", (err) => {
    if (err) console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:", err);
  });

  db.run("CREATE TABLE wallets (address TEXT PRIMARY KEY)", (err) => {
    if (err) console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:", err);
  });

  db.run("PRAGMA synchronous = OFF");
  db.run("PRAGMA journal_mode = MEMORY");
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
if (!fs.existsSync(walletsFile)) {
  console.error(`‚ùå –§–∞–π–ª ${walletsFile} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
  process.exit(1);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
async function importWallets() {
  console.log("‚è≥ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ—à–µ–ª—å–∫–∏ –≤ SQLite...");

  const fileStream = fs.createReadStream(walletsFile);
  const rl = readline.createInterface({
    input: fileStream,
    crlfDelay: Infinity,
  });

  let count = 0;
  const insertStmt = db.prepare(
    "INSERT OR IGNORE INTO wallets (address) VALUES (?)"
  );

  for await (const line of rl) {
    const address = line.trim();

    if (!address) {
      console.warn("‚ö†Ô∏è –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...");
      continue;
    }

    insertStmt.run(address, (err) => {
      if (err) console.error("‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏:", err);
    });

    count++;

    if (count % 100000 === 0) {
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${count.toLocaleString()} –∞–¥—Ä–µ—Å–æ–≤...`);
    }
  }

  insertStmt.finalize((err) => {
    if (err) console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ prepared statement:", err);
    console.log("üéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!");

    db.run("CREATE INDEX idx_wallets ON wallets (address)", (err) => {
      if (err) console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞:", err);
      else console.log("üöÄ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –ø–æ–∏—Å–∫ –±—É–¥–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º.");
      db.close();
    });
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
importWallets();
