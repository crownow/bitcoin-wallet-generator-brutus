const sqlite3 = require("sqlite3").verbose();
const fs = require("fs");
const readline = require("readline");

const walletsFile = "/home/bitcoin_addresses_latest2.tsv";
const dbFile = "wallets.db";

// –û—Ç–∫—Ä—ã–≤–∞–µ–º SQLite –±–∞–∑—É
const db = new sqlite3.Database(dbFile, (err) => {
  if (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ:", err);
    process.exit(1);
  }
  console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.");
});

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è SQLite
db.serialize(() => {
  db.run("PRAGMA journal_mode = OFF");
  db.run("PRAGMA synchronous = OFF");
  db.run("PRAGMA cache_size = 100000");
  db.run("PRAGMA locking_mode = EXCLUSIVE");
  db.run("PRAGMA temp_store = MEMORY");
  db.run("PRAGMA mmap_size = 3000000000;"); // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ RAM –¥–æ 3GB
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
if (!fs.existsSync(walletsFile)) {
  console.error(`‚ùå –§–∞–π–ª ${walletsFile} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
  process.exit(1);
}

// –§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –∫–æ—à–µ–ª—å–∫–æ–≤
async function importWallets() {
  console.log("‚è≥ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ—à–µ–ª—å–∫–∏ –≤ SQLite...");

  const fileStream = fs.createReadStream(walletsFile);
  const rl = readline.createInterface({
    input: fileStream,
    crlfDelay: Infinity,
  });

  let count = 0;
  db.run("BEGIN TRANSACTION"); // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é

  const insertStmt = db.prepare(
    "INSERT OR IGNORE INTO wallets (address) VALUES (?)"
  );

  try {
    for await (const line of rl) {
      const address = line.trim();
      if (!address) continue;

      insertStmt.run(address, (err) => {
        if (err) console.error("‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏:", err);
      });

      count++;

      // –§–∏–∫—Å–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 500k –∑–∞–ø–∏—Å–µ–π, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –ø–∞–º—è—Ç—å
      if (count % 500000 === 0) {
        db.run("COMMIT");
        db.run("BEGIN TRANSACTION");
        console.log(
          `‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: ${count.toLocaleString()} –∞–¥—Ä–µ—Å–æ–≤, COMMIT...`
        );
      }

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –∫–∞–∂–¥—ã–µ 100k –∑–∞–ø–∏—Å–µ–π
      if (count % 100000 === 0) {
        global.gc();
      }
    }
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:", err);
  }

  insertStmt.finalize((err) => {
    if (err) console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ prepared statement:", err);

    db.run("COMMIT", () => {
      // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      console.log("üéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!");

      db.run(
        "CREATE INDEX IF NOT EXISTS idx_wallets ON wallets (address)",
        (err) => {
          if (err) console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞:", err);
          else console.log("üöÄ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –ø–æ–∏—Å–∫ –±—É–¥–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º.");
          db.close();
        }
      );
    });
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
importWallets();
