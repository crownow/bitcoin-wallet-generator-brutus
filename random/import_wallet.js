const sqlite3 = require("sqlite3").verbose();
const fs = require("fs");
const { spawn } = require("child_process");
const path = require("path");

const dbFile = "wallets.db";

// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ `sql_part_*`
const sqlFiles = fs
  .readdirSync(__dirname)
  .filter((file) => file.startsWith("sql_part_"))
  .sort(); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É

if (sqlFiles.length === 0) {
  console.error("‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ (sql_part_*).");
  process.exit(1);
}

console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${sqlFiles.length} SQL-—Ñ–∞–π–ª–æ–≤:`);
sqlFiles.forEach((file) => console.log(`   - ${file}`));

// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ë–î, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
if (fs.existsSync(dbFile)) {
  console.log("üóë –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...");
  fs.unlinkSync(dbFile);
}

// –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é –ë–î
const db = new sqlite3.Database(dbFile, (err) => {
  if (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ë–î:", err);
    process.exit(1);
  }
  console.log("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö.");

  // –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É wallets
  db.run(
    `
    CREATE TABLE IF NOT EXISTS wallets (
      address TEXT PRIMARY KEY
    )
  `,
    (err) => {
      if (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã wallets:", err);
        process.exit(1);
      }
      console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ wallets —Å–æ–∑–¥–∞–Ω–∞.");

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç SQL-—Ñ–∞–π–ª–æ–≤
      importNextFile();
    }
  );
});

function importNextFile(index = 0) {
  if (index >= sqlFiles.length) {
    console.log("üéâ –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω!");
    db.close();
    return;
  }

  const sqlFile = path.join(__dirname, sqlFiles[index]);
  console.log(`üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª: ${sqlFile}`);

  const sqliteProcess = spawn("sqlite3", [dbFile]);

  const sqlStream = fs.createReadStream(sqlFile);
  sqlStream.pipe(sqliteProcess.stdin);

  sqliteProcess.on("close", (code) => {
    if (code === 0) {
      console.log(`‚úÖ –§–∞–π–ª ${sqlFile} —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.`);
      importNextFile(index + 1);
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞ ${sqlFile}. –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: ${code}`);
    }
  });

  sqliteProcess.stderr.on("data", (data) => {
    if (data.includes("database is locked")) {
      console.log("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –ñ–¥—ë–º 5 —Å–µ–∫—É–Ω–¥...");
      setTimeout(() => importNextFile(index), 5000);
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ SQL (${sqlFile}): ${data}`);
    }
  });
}
