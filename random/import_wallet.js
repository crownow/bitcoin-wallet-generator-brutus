const sqlite3 = require("sqlite3").verbose();
const fs = require("fs");
const readline = require("readline");

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
const walletsFile = "/home/bitcoin_addresses_latest2.tsv";
const dbFile = "wallets.db";

// –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database(dbFile);

// –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
db.serialize(() => {
  db.run("DROP TABLE IF EXISTS wallets");
  db.run("CREATE TABLE wallets (address TEXT PRIMARY KEY)");
  db.run("PRAGMA synchronous = OFF"); // –£—Å–∫–æ—Ä—è–µ—Ç –≤—Å—Ç–∞–≤–∫—É
  db.run("PRAGMA journal_mode = MEMORY"); // –£–º–µ–Ω—å—à–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –¥–∏—Å–∫
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
async function importWallets() {
  console.log("‚è≥ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ—à–µ–ª—å–∫–∏ –≤ SQLite...");

  const fileStream = fs.createReadStream(walletsFile);
  const rl = readline.createInterface({
    input: fileStream,
    crlfDelay: Infinity,
  });

  let count = 0;
  const insertStmt = db.prepare(
    "INSERT OR IGNORE INTO wallets (address) VALUES (?)"
  );

  for await (const line of rl) {
    insertStmt.run(line.trim());
    count++;

    if (count % 100000 === 0) {
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${count} –∞–¥—Ä–µ—Å–æ–≤...`);
    }
  }

  insertStmt.finalize(() => {
    console.log("üéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!");
    db.run("CREATE INDEX idx_wallets ON wallets (address)", () => {
      console.log("üöÄ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –ø–æ–∏—Å–∫ –±—É–¥–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º.");
      db.close();
    });
  });
}

importWallets();
