const sqlite3 = require("sqlite3").verbose();
const fs = require("fs");
const { spawn } = require("child_process");

const dbFile = "wallets.db";
const sqlFile = "/root/wallets.sql"; // –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!

if (!fs.existsSync(sqlFile)) {
  console.error(`‚ùå –§–∞–π–ª ${sqlFile} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
  process.exit(1);
}

// –û—Ç–∫—Ä—ã–≤–∞–µ–º SQLite –±–∞–∑—É
const db = new sqlite3.Database(dbFile, (err) => {
  if (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ:", err);
    process.exit(1);
  }
  console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.");

  console.log("‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç SQL-—Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É...");

  function runImport(attempt = 1) {
    const sqliteProcess = spawn("sqlite3", [dbFile]);

    // –ß–∏—Ç–∞–µ–º SQL-—Ñ–∞–π–ª –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –≤ stdin SQLite
    const sqlStream = fs.createReadStream(sqlFile);
    sqlStream.pipe(sqliteProcess.stdin);

    sqliteProcess.on("close", (code) => {
      if (code === 0) {
        console.log("üéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!");
        db.close();
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞. –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: ${code}`);
        if (attempt < 5) {
          console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1} —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...`);
          setTimeout(() => runImport(attempt + 1), 5000);
        } else {
          console.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫.");
        }
      }
    });

    sqliteProcess.stderr.on("data", (data) => {
      if (data.includes("database is locked")) {
        console.log("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –ñ–¥–µ–º...");
        setTimeout(() => runImport(attempt + 1), 5000);
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ SQL: ${data}`);
      }
    });
  }

  runImport();

  // –í—ã–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
  setInterval(() => {
    db.get("SELECT COUNT(*) as count FROM wallets", (err, row) => {
      if (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π:", err);
      } else {
        console.log(
          `üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${row.count.toLocaleString()}`
        );
      }
    });
  }, 10000);
});
