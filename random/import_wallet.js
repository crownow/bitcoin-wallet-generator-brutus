const sqlite3 = require("sqlite3").verbose();
const fs = require("fs");
const readline = require("readline");

const walletsFile = "/home/bitcoin_addresses_latest2.tsv";
const dbFile = "wallets.db";
const BATCH_SIZE = 1_000_000; // –†–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ (1 –º–∏–ª–ª–∏–æ–Ω –∑–∞–ø–∏—Å–µ–π)

// –û—Ç–∫—Ä—ã–≤–∞–µ–º SQLite –±–∞–∑—É
const db = new sqlite3.Database(dbFile, (err) => {
  if (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ:", err);
    process.exit(1);
  }
  console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.");
});

// –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
db.run("CREATE TABLE IF NOT EXISTS wallets (address TEXT UNIQUE)");

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
if (!fs.existsSync(walletsFile)) {
  console.error(`‚ùå –§–∞–π–ª ${walletsFile} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
  process.exit(1);
}

// –§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –∫–æ—à–µ–ª—å–∫–æ–≤
async function importWallets() {
  console.log("‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ SQLite...");

  const fileStream = fs.createReadStream(walletsFile);
  const rl = readline.createInterface({
    input: fileStream,
    crlfDelay: Infinity,
  });

  let batch = [];
  let count = 0;

  try {
    for await (const line of rl) {
      const address = line.trim();
      if (!address) continue;

      batch.push(address);
      count++;

      // –ö–æ–≥–¥–∞ –Ω–∞–±—Ä–∞–ª—Å—è 1 –º–∏–ª–ª–∏–æ–Ω –∑–∞–ø–∏—Å–µ–π ‚Äì –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ö –≤ –±–∞–∑—É
      if (batch.length >= BATCH_SIZE) {
        await insertBatch(batch);
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${count.toLocaleString()} –∞–¥—Ä–µ—Å–æ–≤`);
        batch = []; // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
      }
    }

    // –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (batch.length > 0) {
      await insertBatch(batch);
    }

    console.log("üéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:", err);
  } finally {
    db.close();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
function insertBatch(batch) {
  return new Promise((resolve, reject) => {
    db.serialize(() => {
      db.run("BEGIN TRANSACTION");
      const stmt = db.prepare(
        "INSERT OR IGNORE INTO wallets (address) VALUES (?)"
      );

      for (const address of batch) {
        stmt.run(address);
      }

      stmt.finalize((err) => {
        if (err) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", err);
          reject(err);
        } else {
          db.run("COMMIT", resolve);
        }
      });
    });
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
importWallets();
