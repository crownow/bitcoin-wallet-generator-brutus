const sqlite3 = require("sqlite3").verbose();
const fs = require("fs");
const { spawn } = require("child_process");
const path = require("path");

const dbFile = "wallets.db";

// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å –∏–º–µ–Ω–µ–º, –Ω–∞—á–∏–Ω–∞—é—â–∏–º—Å—è –Ω–∞ `sql_part_`
const sqlFiles = fs
  .readdirSync(__dirname)
  .filter((file) => file.startsWith("sql_part_")) // –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∏–º–µ–Ω–∏
  .sort(); // –°–æ—Ä—Ç–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∂–∞–ª–∏—Å—å –≤ –ø–æ—Ä—è–¥–∫–µ

if (sqlFiles.length === 0) {
  console.error("‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ (sql_part_*).");
  process.exit(1);
}

console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${sqlFiles.length} —Ñ–∞–π–ª–æ–≤ SQL:`);
sqlFiles.forEach((file) => console.log(`   - ${file}`));

// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ë–î, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
if (fs.existsSync(dbFile)) {
  console.log("üóë –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...");
  fs.unlinkSync(dbFile);
}

// –û—Ç–∫—Ä—ã–≤–∞–µ–º SQLite –±–∞–∑—É
const db = new sqlite3.Database(dbFile, (err) => {
  if (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ:", err);
    process.exit(1);
  }
  console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.");
  console.log("‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç SQL-—Ñ–∞–π–ª–æ–≤...");

  function importNextFile(index = 0) {
    if (index >= sqlFiles.length) {
      console.log("üéâ –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω!");
      db.close();
      return;
    }

    const sqlFile = path.join(__dirname, sqlFiles[index]);
    console.log(`üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª: ${sqlFile}`);

    const sqliteProcess = spawn("sqlite3", [dbFile]);

    // –ß–∏—Ç–∞–µ–º SQL-—Ñ–∞–π–ª –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –≤ stdin SQLite
    const sqlStream = fs.createReadStream(sqlFile);
    sqlStream.pipe(sqliteProcess.stdin);

    sqliteProcess.on("close", (code) => {
      if (code === 0) {
        console.log(`‚úÖ –§–∞–π–ª ${sqlFile} —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.`);
        importNextFile(index + 1); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª
      } else {
        console.error(
          `‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞ ${sqlFile}. –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: ${code}`
        );
      }
    });

    sqliteProcess.stderr.on("data", (data) => {
      if (data.includes("database is locked")) {
        console.log("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥...");
        setTimeout(() => importNextFile(index), 5000);
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ SQL (${sqlFile}): ${data}`);
      }
    });
  }

  importNextFile();

  // –í—ã–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
  setInterval(() => {
    db.get("SELECT COUNT(*) as count FROM wallets", (err, row) => {
      if (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π:", err);
      } else {
        console.log(
          `üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${row.count.toLocaleString()}`
        );
      }
    });
  }, 10000);
});
