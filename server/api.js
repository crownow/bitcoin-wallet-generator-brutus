const { execSync } = require("child_process");

const RPC_USER = "bitcoinuser";
const RPC_PASSWORD = "supersecretpassword";
const RPC_PORT = 8332;
const BITCOIN_CLI_CMD = `bitcoin-cli -rpcuser=${RPC_USER} -rpcpassword=${RPC_PASSWORD} -rpcport=${RPC_PORT}`;

function runBitcoinCli(command, params = []) {
  try {
    const cmd = `${BITCOIN_CLI_CMD} ${command} ${params.join(" ")}`;
    const output = execSync(cmd, { encoding: "utf-8" });
    return JSON.parse(output);
  } catch (error) {
    console.error(`‚ùå Error Bitcoin Core RPC (${command}):`, error.message);
    return null;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å scantxoutset
function isScanInProgress() {
  const status = runBitcoinCli("scantxoutset", ["status"]);
  return status && status.progress < 1.0;
}

// –ó–∞–ø—É—Å–∫ scantxoutset —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º
function waitForScan() {
  while (isScanInProgress()) {
    console.log("‚è≥ Scan in progress, waiting...");
    setTimeout(() => {}, 5000);
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ scantxoutset (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
async function getWalletBalance(addresses) {
  const balances = {};
  const addrList = Object.values(addresses)
    .map((addr) => `"addr(${addr})"`)
    .join(", ");

  if (!addrList) {
    return balances;
  }

  waitForScan(); // –ñ–¥–µ–º, –ø–æ–∫–∞ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ

  try {
    const cmd = `${BITCOIN_CLI_CMD} scantxoutset start '[${addrList}]'`;
    console.log(
      `üöÄ Running scantxoutset for ${
        Object.keys(addresses).length
      } addresses...`
    );
    const output = execSync(cmd, { encoding: "utf-8" });
    const result = JSON.parse(output);

    if (result.success) {
      for (const unspent of result.unspents) {
        const addr = unspent.desc.match(/addr\((.*?)\)/)[1];
        balances[addr] = {
          balance: (balances[addr]?.balance || 0) + unspent.amount,
          transactions: (balances[addr]?.transactions || 0) + 1,
        };
      }
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –±–∞–ª–∞–Ω—Å—ã
    for (const addr of Object.values(addresses)) {
      if (!balances[addr]) {
        balances[addr] = { balance: 0, transactions: 0 };
      }
    }
  } catch (error) {
    console.error(`‚ùå Error Bitcoin Core RPC (scantxoutset):`, error.message);
    for (const addr of Object.values(addresses)) {
      balances[addr] = { balance: 0, transactions: 0 };
    }
  }

  return balances;
}

module.exports = { getWalletBalance };
