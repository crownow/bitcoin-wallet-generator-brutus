const { exec } = require("child_process");
const { promisify } = require("util");

const execAsync = promisify(exec);

// –£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ RPC –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Bitcoin Core
const RPC_USER = "bitcoinuser";
const RPC_PASSWORD = "supersecretpassword";
const RPC_PORT = 8332;
const RPC_HOST = "127.0.0.1"; // –õ–æ–∫–∞–ª—å–Ω—ã–π Bitcoin Core

const BITCOIN_CLI_CMD = `bitcoin-cli -rpcuser=${RPC_USER} -rpcpassword=${RPC_PASSWORD} -rpcport=${RPC_PORT}`;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ bitcoin-cli
async function bitcoinCliCommand(command, params = []) {
  try {
    const cmd = `${BITCOIN_CLI_CMD} ${command} ${params.join(" ")}`;
    const { stdout } = await execAsync(cmd);
    return JSON.parse(stdout);
  } catch (error) {
    console.error(`‚ùå Error Bitcoin Core RPC (${command}):`, error.message);
    return null;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ `getreceivedbyaddress`
async function getWalletBalance(addresses) {
  if (!addresses || typeof addresses !== "object") {
    console.error("‚ùå Invalid addresses input:", addresses);
    return null;
  }

  const balances = {};
  for (const [type, address] of Object.entries(addresses)) {
    console.log(`üîç Checking balance for ${type}: ${address}`);

    // –ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ `getreceivedbyaddress` (Bitcoin Core)
    const balance = await bitcoinCliCommand("getreceivedbyaddress", [address]);

    balances[type] = balance || 0;
  }

  return balances;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –≤ UTXO (–Ω–∞–ª–∏—á–∏–µ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –≤—ã—Ö–æ–¥–æ–≤)
async function checkAddressUTXO(address) {
  const utxo = await bitcoinCliCommand("scantxoutset", [
    "start",
    `[{ "desc": "addr(${address})", "range": 1000 }]`,
  ]);
  return utxo || {};
}

module.exports = { bitcoinCliCommand, getWalletBalance, checkAddressUTXO };
