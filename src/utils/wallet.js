const bitcoin = require("bitcoinjs-lib");
const crypto = require("crypto");
const wif = require("wif");
const tinysecp = require("tiny-secp256k1");
const ECPairFactory = require("ecpair").default;
const bs58check = require("bs58check");

// ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ECC –±–∏–±–ª–∏–æ—Ç–µ–∫—É
bitcoin.initEccLib(tinysecp);
const ECPair = ECPairFactory(tinysecp);

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ SHA-256 —Ö–µ—à (HEX).
 * @param {string} phrase
 * @returns {string} 64-—Å–∏–º–≤–æ–ª—å–Ω—ã–π HEX –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
 */
function sha256(phrase) {
  return crypto.createHash("sha256").update(phrase, "utf8").digest("hex");
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç WIF (Wallet Import Format) –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏.
 * @param {string} privateKeyHex
 * @returns {string} WIF –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
 */
function generateWIF(privateKeyHex) {
  const privateKeyBuffer = Buffer.from(privateKeyHex, "hex");

  if (privateKeyBuffer.length !== 32) {
    throw new Error(
      `–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–ª—é—á–∞: ${privateKeyBuffer.length} –±–∞–π—Ç`
    );
  }

  return wif.encode(128, privateKeyBuffer, true); // ‚úÖ –¢–æ–ª—å–∫–æ —Å–∂–∞—Ç—ã–π WIF
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á (—Å–∂–∞—Ç—ã–π, 33 –±–∞–π—Ç–∞).
 * @param {Buffer} privateKeyBuffer
 * @returns {Buffer} –°–∂–∞—Ç—ã–π –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
 */
function generatePublicKey(privateKeyBuffer) {
  const keyPair = ECPair.fromPrivateKey(privateKeyBuffer, { compressed: true });
  return Buffer.from(keyPair.publicKey); // ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Buffer
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Legacy P2PKH-–∞–¥—Ä–µ—Å–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "1").
 * @param {Buffer} publicKey
 * @returns {string} Bitcoin-–∞–¥—Ä–µ—Å P2PKH
 */
function generateP2PKH(publicKey) {
  const shaHash = crypto.createHash("sha256").update(publicKey).digest();
  const ripemdHash = crypto.createHash("ripemd160").update(shaHash).digest();
  const mainnetPrefix = Buffer.concat([Buffer.from([0x00]), ripemdHash]);
  return bs58check.encode(mainnetPrefix);
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SegWit (P2SH-P2WPKH) (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "3").
 * @param {Buffer} publicKey
 * @returns {string} Bitcoin-–∞–¥—Ä–µ—Å P2SH
 */
function generateP2SH(publicKey) {
  return bitcoin.payments.p2sh({
    redeem: bitcoin.payments.p2wpkh({
      pubkey: publicKey,
      network: bitcoin.networks.bitcoin,
    }),
  }).address;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Native SegWit P2WPKH (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "bc1").
 * @param {Buffer} publicKey
 * @returns {string} Bitcoin-–∞–¥—Ä–µ—Å P2WPKH
 */
function generateP2WPKH(publicKey) {
  return bitcoin.payments.p2wpkh({
    pubkey: publicKey,
    network: bitcoin.networks.bitcoin,
  }).address;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Taproot (P2TR) (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "bc1p").
 * @param {Buffer} publicKey
 * @returns {string} Bitcoin-–∞–¥—Ä–µ—Å P2TR
 */
function generateP2TR(publicKey) {
  const xOnlyPubkey = publicKey.slice(1, 33); // ‚úÖ X-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Schnorr-–ø–æ–¥–ø–∏—Å–∏
  return bitcoin.payments.p2tr({
    internalPubkey: xOnlyPubkey,
    network: bitcoin.networks.bitcoin,
  }).address;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ Bitcoin-–∞–¥—Ä–µ—Å–æ–≤.
 * @param {Buffer} publicKey
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å —á–µ—Ç—ã—Ä—å–º—è —Ç–∏–ø–∞–º–∏ –∞–¥—Ä–µ—Å–æ–≤
 */
function generateBitcoinAddresses(publicKey) {
  return {
    p2pkh: generateP2PKH(publicKey),
    p2sh: generateP2SH(publicKey),
    p2wpkh: generateP2WPKH(publicKey),
    p2tr: generateP2TR(publicKey),
  };
}

/**
 * –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Bitcoin-–∞–¥—Ä–µ—Å–æ–≤.
 * @param {string} phrase
 * @returns {Object} –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
 */
function processPhrase(phrase) {
  console.log(`\nüöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—Ä–∞–∑—ã: ${phrase}`);

  const privateKeyHex = sha256(phrase);
  const wifKey = generateWIF(privateKeyHex);
  const privateKeyBuffer = Buffer.from(privateKeyHex, "hex");

  const publicKey = generatePublicKey(privateKeyBuffer);
  const addresses = generateBitcoinAddresses(publicKey);

  return {
    phrase,
    privateKeyHex,
    wifKey,
    publicKey: publicKey.toString("hex"),
    addresses,
  };
}

module.exports = { processPhrase };
