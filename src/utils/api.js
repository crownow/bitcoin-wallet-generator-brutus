const axios = require("axios");
const https = require("https");

const httpsAgent = new https.Agent({ rejectUnauthorized: false });

const API_PROVIDERS = [
  "https://blockstream.info/api/address/",
  "https://mempool.space/api/address/",
  "https://api.blockcypher.com/v1/btc/main/addrs/",
  "https://sochain.com/api/v2/get_address_balance/BTC/",
  "https://blockchair.com/bitcoin/dashboards/address/",
  "https://sochain.com/api/v2/address/BTC/",
  "https://api.blockchain.info/haskoin-store/btc/address/",
];

let isProcessing = true;
let apiCooldown = new Map(); // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ API

function stopProcessing() {
  isProcessing = false;
}

/**
 * üìå –ó–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
 */
async function fetchWithRetries(url, retries = 3, delay = 5000) {
  for (let i = 0; i < retries; i++) {
    if (!isProcessing) return null;

    try {
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}: ${url}`);
      const response = await axios.get(url, {
        headers: { "User-Agent": "Mozilla/5.0" },
        httpsAgent,
      });

      return response.data;
    } catch (error) {
      if (error.response) {
        const status = error.response.status;
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (${url}): ${status}`);

        if (status === 429) {
          console.warn(`‚è≥ API –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ (429), –∂–¥–µ–º...`);
          apiCooldown.set(url, Date.now() + delay);
        }

        if (status === 404) {
          console.warn(`üö´ –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω (${url})`);
          return { balance: 0, transactions: 0 };
        }
      }

      if (i < retries - 1) {
        console.log(`‚è≥ –ñ–¥–µ–º ${delay / 1000} —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...`);
        await new Promise((resolve) => setTimeout(resolve, delay));
      }
    }
  }
  return null;
}

/**
 * ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ API —Å —É—á–µ—Ç–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ 429
 */
async function fetchBalance(address) {
  const availableAPIs = API_PROVIDERS.filter((api) => {
    const cooldown = apiCooldown.get(api);
    return !cooldown || Date.now() > cooldown; // –ò—Å–∫–ª—é—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ API
  });

  if (availableAPIs.length === 0) {
    console.warn(`üö® –í—Å–µ API –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã, –∂–¥–µ–º 10 —Å–µ–∫—É–Ω–¥...`);
    await new Promise((resolve) => setTimeout(resolve, 10000));
    return fetchBalance(address); // –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
  }

  for (const api of availableAPIs) {
    if (!isProcessing)
      return { balance: "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", transactions: "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" };

    try {
      console.log(`üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ API: ${api}${address}`);
      const data = await fetchWithRetries(`${api}${address}`);

      if (data) {
        return {
          balance: data.chain_stats?.funded_txo_sum / 1e8 || 0,
          transactions: data.chain_stats?.tx_count || 0,
        };
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ API (${api}):`, error.message);
    }
  }

  return { balance: "–û—à–∏–±–∫–∞", transactions: "–û—à–∏–±–∫–∞" };
}

/**
 * üè¶ –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤
 */
async function getWalletBalance(addresses) {
  if (
    !addresses ||
    typeof addresses !== "object" ||
    Object.keys(addresses).length === 0
  ) {
    throw new Error("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –æ–±—ä–µ–∫—Ç –∞–¥—Ä–µ—Å–æ–≤!");
  }

  const results = {};

  for (const [type, address] of Object.entries(addresses)) {
    if (!isProcessing) {
      console.warn("‚èπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í—ã—Ö–æ–¥ –∏–∑ getWalletBalance.");
      break;
    }

    if (!address || address === "–û—à–∏–±–∫–∞") {
      results[type] = { balance: "–û—à–∏–±–∫–∞", transactions: "–û—à–∏–±–∫–∞" };
      continue;
    }

    console.log(`üü¢ –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è ${type}: ${address}`);
    results[type] = await fetchBalance(address);
  }

  return results;
}

module.exports = { getWalletBalance, API_PROVIDERS, stopProcessing };
