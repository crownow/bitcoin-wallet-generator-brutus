const crypto = require("crypto");
const wif = require("wif");

// –§—É–Ω–∫—Ü–∏—è SHA-256 –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ñ—Ä–∞–∑—ã –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (HEX)
function sha256(phrase) {
  return crypto
    .createHash("sha256")
    .update(Buffer.from(phrase, "utf8"))
    .digest("hex");
}

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—Ä–∞–∑–∞
const testPhrase =
  "The Times 03/Jan/2009 Chancellor on brink of second bailout for banks";

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
const privateKeyHex = sha256(testPhrase);
console.log(`‚úÖ SHA-256: ${privateKeyHex}`);
console.log(`‚úÖ –î–ª–∏–Ω–∞ –∫–ª—é—á–∞: ${privateKeyHex.length} —Å–∏–º–≤–æ–ª–æ–≤ (–æ–∂–∏–¥–∞–µ—Ç—Å—è 64)`);

// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º HEX –≤ Buffer
const privateKeyBuffer = Buffer.from(privateKeyHex, "hex");

// üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —ç—Ç–æ 32-–±–∞–π—Ç–æ–≤—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
if (privateKeyBuffer.length !== 32) {
  console.error(
    `‚ùå –û—à–∏–±–∫–∞: –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—É—é –¥–ª–∏–Ω—É (${privateKeyBuffer.length} –±–∞–π—Ç)`
  );
  process.exit(1);
}
console.log(`‚úÖ Buffer length: ${privateKeyBuffer.length} –±–∞–π—Ç (–æ–∂–∏–¥–∞–µ—Ç—Å—è 32)`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º WIF-—Ñ–æ—Ä–º–∞—Ç
try {
  const compressedWIF = wif.encode(128, privateKeyBuffer, true);
  const uncompressedWIF = wif.encode(128, privateKeyBuffer, false);

  console.log(`‚úÖ –°–∂–∞—Ç—ã–π WIF: ${compressedWIF}`);
  console.log(`‚úÖ –ù–µ—Å–∂–∞—Ç—ã–π WIF: ${uncompressedWIF}`);
} catch (error) {
  console.log(
    `üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º privateKeyBuffer –ø–µ—Ä–µ–¥ wif.encode():`,
    privateKeyBuffer
  );
  console.log(`üîπ HEX –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: ${privateKeyBuffer.toString("hex")}`);

  console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ WIF: ${error.message}`);
}
